import type { TComponentsComponentJson, TComponentsComponentSettings, TComponentsComposerJson } from './Components.types.js';
import __ComponentsDependency from './ComponentsDependency.js';
import __ComponentsLibrary from './ComponentsLibrary.js';
export default class ComponentsComponent {
    private _settings;
    private _componentJson;
    private _library;
    private _rootDir;
    private _newName?;
    private _dependencies;
    private _originalName;
    get settings(): TComponentsComponentSettings;
    get name(): string;
    get description(): string;
    get library(): __ComponentsLibrary;
    get componentJson(): TComponentsComponentJson;
    get rootDir(): string;
    get version(): string;
    get dependencies(): Record<string, __ComponentsDependency>;
    constructor(rootDir: string, pkg: __ComponentsLibrary, settings: TComponentsComponentSettings);
    finalizeComponent(): Promise<void>;
    setRootDir(rootDir: string): void;
    setName(name: string): void;
    copyToSync(destDir: string): void;
    extendsDependencies(dependencies: Record<string, string>): void;
    extendsComposerJson(composerJson: TComponentsComposerJson): void;
    extendsPackageJson(packageJson: TComponentsComposerJson): void;
    private _updateDependencies;
    hasDependencies(): boolean;
    addDependency(dependency: __ComponentsDependency): void;
    installDependencies(type?: 'npm' | 'composer' | ('npm' | 'composer')[]): Promise<__ComponentsDependency[]>;
}
