---
interface Props {
  themes: {
    name: string;
    value: string;
  }[];
}

import './theme.css';

const themes = Astro.props.themes;
---

<div id="theme" class="theme" transition:persist>
  <div class="_select" tabindex="0">
    {
      themes?.map((theme) => (
        <div data-theme={theme.value} class={`_theme theme-${theme.value}`}>
          <div class="_default">
            <p class="_label">
              <>
                <span class="_main">{theme.name.split(' ')[0]}</span>
                <span class="_accent">
                  {theme.name.split(' ')[1] ?? theme.name}
                </span>
              </>
            </p>
          </div>
          <div class="_foreground">
            <p class="_label">
              <>
                <span class="_main">{theme.name.split(' ')[0]}</span>
                <span class="_accent">
                  {theme.name.split(' ')[1] ?? theme.name}
                </span>
              </>
            </p>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  import { __restoreTheme, __setTheme } from '@lotsof/sugar/theme';

  const $colorSchema = document.getElementById('theme'),
    $themes = $colorSchema?.querySelectorAll('._theme');

  for (let [i, $theme] of $themes?.entries() ?? []) {
    $theme.addEventListener('click', () => {
      const themeTheme = ($theme as HTMLElement).dataset.theme;
      // __setCookie('theme', themeTheme as string);
      __setTheme(themeTheme as string);
    });
  }

  document.addEventListener('astro:after-swap', () => {
    __restoreTheme('dark');
  });
  __restoreTheme('dark');
</script>
