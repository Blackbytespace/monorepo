---
interface Props {
  items: any[];
}

const items = Astro.props;
---

<script>
  import __AdvancedSelectElement from '@blackbyte/advanced-select-element';
  // @ts-ignore
  import { __isMobile } from '@blackbyte/sugar/is';
  import { __hotkey } from '@blackbyte/sugar/keyboard';
  import { __idCompliant } from '@blackbyte/sugar/string';
  import { __toSlug } from '@blackbyte/website-common/src/components/utils/utils';
  import { navigate } from 'astro:transitions/client';

  const $expand = document.querySelector('.search ._expand') as HTMLElement;

  let cachedItems: any[];

  document.addEventListener('sAdvancedSelect.select', (e) => {
    document.body.classList.remove('-search-large');
    const item = (e as CustomEvent).detail.item;
    setTimeout(
      () => {
        (document.activeElement as HTMLElement)?.blur();
      },
      __isMobile() ? 100 : 0,
    );
    setTimeout(
      () => {
        if (item.url) {
          window.open(item.url, '_blank')?.focus();
        } else if (item.slug) {
          navigate(item.slug);
        } else {
          navigate(`/doc/${__toSlug(item.value)}`);
        }
      },
      __isMobile() ? 200 : 0,
    );
  });

  const $loSearch = document.querySelector('lo-search') as HTMLElement;
  document.addEventListener('keydown', () => {
    if (document.activeElement?.tagName === 'INPUT') {
      return;
    }
    $loSearch?.focus();
  });

  __AdvancedSelectElement.define('lo-search', {
    async items() {
      if (cachedItems) {
        return cachedItems;
      }

      const request = await fetch('/api/doc'),
        data = await request.json();

      const sections: Record<string, any> = {};

      data.forEach((item: any) => {
        let platforms = [];
        try {
          platforms = JSON.parse(item.data.platform);
        } catch (e) {}
        // @ts-ignore
        platforms = platforms.map((p: string) => p.name.toLowerCase());

        const group = item.data.namespace.split('.')[3];

        if (!sections[group]) {
          sections[group] = {
            type: 'group',
            label: group,
            items: [],
          };
        }

        const platformsHtml = platforms
          .map((platform: string) => {
            return `<span class="platform -${platform}">${platform}</span>`;
          })
          .join('');

        sections[group].items.push({
          id: __idCompliant(item.id),
          label: `<div class="_item">
            <div class="_item-metas">
              <div class="_item-title">${item.data.title}</div>
              <div class="_item-description">${item.data.description}</div>
            </div>
            <div class="_item-platforms">${platformsHtml}</div>
          </div>`,
          value: `${item.id.replace(/\//gm, '.').replace(/\.mdx$/, '')}`,
          preventSet: true,
        });
      });

      cachedItems = [...Object.values(sections)];
      if ((window as any).searchItems) {
        cachedItems = [...(window as any).searchItems, ...cachedItems];
      }
      return cachedItems;
    },
    filtrable: ['label'],
    hotkey: ['cmd+p', 'cmd+shift+p'],
  });

  // expand
  $expand?.addEventListener('click', () => {
    document.body.classList.add('-search-large');
  });

  document.addEventListener('astro:page-load', () => {
    __hotkey('cmd+shift+p', () => {
      document.body.classList.add('-search-large');
    });
    __hotkey('escape', () => {
      document.body.classList.remove('-search-large');
    });
  });
</script>

<form class="search">
  <script style="application/json" define:vars={{ items }} is:inline>
    window.searchItems = items.items;
  </script>
  <lo-search inline>
    <input type="search" class="_input form-input" placeholder="Search" />
  </lo-search>
</form>
