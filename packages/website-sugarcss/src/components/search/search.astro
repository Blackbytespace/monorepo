<script>
import __AdvancedSelectElement from '@lotsof/advanced-select-element';
import { __querySelectorLive } from '@lotsof/sugar/dom';
import { __escapeQueue } from '@lotsof/sugar/keyboard';
import { __idCompliant } from '@lotsof/sugar/string';
import { __toSlug } from '@lotsof/website-common/src/components/utils/utils';
import { navigate } from 'astro:transitions/client';

  let cachedItems: any[];

  document.addEventListener('advancedSelect.select', (e) => {
    const item = (e as CustomEvent).detail.item;
    if (item.slug) {
      navigate(item.slug);
    } else {
      navigate(`/doc/${__toSlug(item.value)}`);
    }
  });

  function toggleSearch() {
    // cancel registered escape queue
    escapeQueuePromise?.cancel?.();

    // toggle search
    document.body.classList.toggle('-search');

    // focus in search
    if (document.body.classList.contains('-search')) {
      (document.querySelector('search input') as HTMLElement)?.focus();
    }

    // register escape queue
    escapeQueuePromise = __escapeQueue(() => {
      document.body.classList.remove('-search');
    });
  }

  __AdvancedSelectElement.define('lo-search', {
    async items() {
      if (cachedItems) {
        return cachedItems;
      }

      const request = await fetch('/api/doc'),
        data = await request.json();

      const sections: Record<string, any> = {};

      data.forEach((item: any) => {
        let platforms = [];
        try {
          platforms = JSON.parse(item.data.platform);
        } catch (e) {}
        // @ts-ignore
        platforms = platforms.map((p: string) => p.name.toLowerCase());

        const group = item.data.namespace.split('.')[3];

        if (!sections[group]) {
          sections[group] = {
            type: 'group',
            label: group,
            items: [],
          };
        }

        sections[group].items.push({
          id: __idCompliant(item.id),
          label: `${item.data.title}`,
          value: `${item.id.replace(/\//gm, '.').replace(/\.mdx$/, '')}`,
        });
      });

      cachedItems = [
        {
          type: 'group',
          label: 'Documentation',
          items: [
            {
              id: 'install',
              label: 'Get started',
              value: 'install',
              slug: '/',
            },
            {
              id: 'vite',
              label: 'Use with vite',
              value: 'vite',
              slug: '/doc/vite',
            },
            {
              id: 'settings',
              label: 'Settings',
              value: 'settings',
              slug: '/doc/settings',
            },
            {
              id: 'mixins',
              label: 'Mixins',
              value: 'mixins',
              slug: '/doc/mixins',
            },
            {
              id: 'grids',
              label: 'Grids',
              value: 'grids',
              slug: '/doc/grids',
            },
          ],
        },
        ...Object.values(sections),
      ];
      return cachedItems;
    },
  });

  let escapeQueuePromise: any;
  document.addEventListener('keyup', (e) => {
    if (e.ctrlKey && e.key === 'p') {
      toggleSearch();
    }
  });

  const $container = document.querySelector('.search ._container');
  document.querySelector('.search')?.addEventListener('pointerup', (e) => {
    if ($container?.contains(e.target as HTMLElement)) {
      return;
    }
    toggleSearch();
  });

  __querySelectorLive('[lo-search]', ($elm: HTMLElement) => {
    $elm.addEventListener('pointerup', (e) => {
      e.preventDefault();
      setTimeout(() => {
        toggleSearch();
      }, 100);
    });
  });
</script>

<form class="search" transition:persist>
  <lo-search inline>
    <input type="search" class="_input" placeholder="Search" />
  </lo-search>
</form>
